// -----------------------------------------------------------------------------
// File: proto/mpc.proto
// What it does:
//   Defines the gRPC/Protobuf API for the MPC Ephemeral Signing POC.
//   Services:
//     - Coordinator     : Orchestrates sessions & approval-based "threshold" flow
//     - EphemeralCA     : Issues short-lived code-signing certificates
//     - TransparencyLog : Append-only audit of completed signing events
//     - AuthN           : Verifies WebAuthn/YubiKey (shim in the POC)
//
// Security & Ops notes:
//   - Use TLS/mTLS on all gRPC channels in production (enforce SAN/SPIFFE).
//   - Pass auth metadata via gRPC metadata; validate server-side with RBAC.
//   - Treat WebAuthn/PIV artifacts as sensitive (do not log).
//   - Append final signature events to TransparencyLog with inclusion proofs.
//
// Tunables (enforced in services, not this schema):
//   - Quorum sizes (REQUIRED_ENGINEERS, REQUIRED_STEWARDS)
//   - Session TTL
//   - Per-RPC deadlines & retry policies
// -----------------------------------------------------------------------------
syntax = "proto3";
package mpc.v1;

import "google/protobuf/empty.proto";

// Common types
message Quorum { uint32 engineers = 1; uint32 stewards = 2; }
message Participant { string name = 1; string email = 2; string role = 3; }
message PIVProof { bytes attestation_cert_der = 1; bytes slot_cert_der = 2; }
message WebAuthnToken { string opaque = 1; }
message SessionRef { string id = 1; }

message CreateSessionRequest {
  string repo = 1; string branch = 2; string commit = 3;
  string artifact_digest = 4; // hex sha256
}
message CreateSessionResponse {
  string session_id = 1; string mpk = 2; int64 expires_unix = 3;
  Quorum required_quorum = 4;
}

message JoinRequest {
  string session_id = 1;
  Participant participant = 2;
  WebAuthnToken webauthn = 3;
  PIVProof piv = 4; // optional in POC
}
message JoinResponse { bool ok = 1; string role = 2; }

message NonceShare { string session_id = 1; bytes payload = 2; }
message SigShare   { string session_id = 1; bytes wire_message = 2; }

message SignatureResult {
  string session_id = 1; bytes signature = 2; bytes certificate_pem = 3;
  bool complete = 4;
}

message MPCMessage {
  string session_id = 1;
  oneof kind { bytes nonce = 2; bytes partial = 3; bool done = 4; }
}

// Coordinator
service Coordinator {
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
  rpc Join(JoinRequest) returns (JoinResponse);
  rpc SubmitNonce(NonceShare) returns (google.protobuf.Empty);
  rpc SubmitShare(SigShare) returns (google.protobuf.Empty);
  rpc GetSignature(SessionRef) returns (SignatureResult);
  rpc MPC(stream MPCMessage) returns (stream MPCMessage);
}

// Ephemeral CA
message IssueCertRequest {
  string mpk = 1; string subject_email = 2; int32 ttl_seconds = 3;
  map<string,string> claims = 4; // repo, branch, commit, user, etc.
}
message IssueCertResponse {
  bytes cert_pem = 1; bytes chain_pem = 2; int64 expires_unix = 3;
}
service EphemeralCA { rpc Issue(IssueCertRequest) returns (IssueCertResponse); }

// Transparency Log
message TLogAppend {
  string artifact_digest = 1; bytes signature = 2; string mpk = 3;
  int64 ts_unix = 4; bytes policy_hash = 5;
}
message TLogInclusion { bool ok = 1; string log_id = 2; bytes inclusion_proof = 3; }
message GetByArtifactRequest { string artifact_digest = 1; }
service TransparencyLog {
  rpc Append(TLogAppend) returns (TLogInclusion);
  rpc GetByArtifact(GetByArtifactRequest) returns (TLogAppend);
}

// Auth shim
message VerifyWebAuthnRequest { WebAuthnToken token = 1; }
message VerifyWebAuthnResponse { bool ok = 1; string user = 2; repeated string groups = 3; }
service AuthN { rpc VerifyWebAuthn(VerifyWebAuthnRequest) returns (VerifyWebAuthnResponse); }
