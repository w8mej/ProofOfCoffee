# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import mpc_pb2 as mpc__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in mpc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CoordinatorStub(object):
    """Coordinator
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSession = channel.unary_unary(
                '/mpc.v1.Coordinator/CreateSession',
                request_serializer=mpc__pb2.CreateSessionRequest.SerializeToString,
                response_deserializer=mpc__pb2.CreateSessionResponse.FromString,
                _registered_method=True)
        self.Join = channel.unary_unary(
                '/mpc.v1.Coordinator/Join',
                request_serializer=mpc__pb2.JoinRequest.SerializeToString,
                response_deserializer=mpc__pb2.JoinResponse.FromString,
                _registered_method=True)
        self.SubmitNonce = channel.unary_unary(
                '/mpc.v1.Coordinator/SubmitNonce',
                request_serializer=mpc__pb2.NonceShare.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.SubmitShare = channel.unary_unary(
                '/mpc.v1.Coordinator/SubmitShare',
                request_serializer=mpc__pb2.SigShare.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.GetSignature = channel.unary_unary(
                '/mpc.v1.Coordinator/GetSignature',
                request_serializer=mpc__pb2.SessionRef.SerializeToString,
                response_deserializer=mpc__pb2.SignatureResult.FromString,
                _registered_method=True)
        self.MPC = channel.stream_stream(
                '/mpc.v1.Coordinator/MPC',
                request_serializer=mpc__pb2.MPCMessage.SerializeToString,
                response_deserializer=mpc__pb2.MPCMessage.FromString,
                _registered_method=True)


class CoordinatorServicer(object):
    """Coordinator
    """

    def CreateSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Join(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitNonce(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitShare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSignature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MPC(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoordinatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSession,
                    request_deserializer=mpc__pb2.CreateSessionRequest.FromString,
                    response_serializer=mpc__pb2.CreateSessionResponse.SerializeToString,
            ),
            'Join': grpc.unary_unary_rpc_method_handler(
                    servicer.Join,
                    request_deserializer=mpc__pb2.JoinRequest.FromString,
                    response_serializer=mpc__pb2.JoinResponse.SerializeToString,
            ),
            'SubmitNonce': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitNonce,
                    request_deserializer=mpc__pb2.NonceShare.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SubmitShare': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitShare,
                    request_deserializer=mpc__pb2.SigShare.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetSignature': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSignature,
                    request_deserializer=mpc__pb2.SessionRef.FromString,
                    response_serializer=mpc__pb2.SignatureResult.SerializeToString,
            ),
            'MPC': grpc.stream_stream_rpc_method_handler(
                    servicer.MPC,
                    request_deserializer=mpc__pb2.MPCMessage.FromString,
                    response_serializer=mpc__pb2.MPCMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mpc.v1.Coordinator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mpc.v1.Coordinator', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Coordinator(object):
    """Coordinator
    """

    @staticmethod
    def CreateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc.v1.Coordinator/CreateSession',
            mpc__pb2.CreateSessionRequest.SerializeToString,
            mpc__pb2.CreateSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Join(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc.v1.Coordinator/Join',
            mpc__pb2.JoinRequest.SerializeToString,
            mpc__pb2.JoinResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitNonce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc.v1.Coordinator/SubmitNonce',
            mpc__pb2.NonceShare.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitShare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc.v1.Coordinator/SubmitShare',
            mpc__pb2.SigShare.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSignature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc.v1.Coordinator/GetSignature',
            mpc__pb2.SessionRef.SerializeToString,
            mpc__pb2.SignatureResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MPC(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/mpc.v1.Coordinator/MPC',
            mpc__pb2.MPCMessage.SerializeToString,
            mpc__pb2.MPCMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class EphemeralCAStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Issue = channel.unary_unary(
                '/mpc.v1.EphemeralCA/Issue',
                request_serializer=mpc__pb2.IssueCertRequest.SerializeToString,
                response_deserializer=mpc__pb2.IssueCertResponse.FromString,
                _registered_method=True)


class EphemeralCAServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Issue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EphemeralCAServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Issue': grpc.unary_unary_rpc_method_handler(
                    servicer.Issue,
                    request_deserializer=mpc__pb2.IssueCertRequest.FromString,
                    response_serializer=mpc__pb2.IssueCertResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mpc.v1.EphemeralCA', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mpc.v1.EphemeralCA', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EphemeralCA(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Issue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc.v1.EphemeralCA/Issue',
            mpc__pb2.IssueCertRequest.SerializeToString,
            mpc__pb2.IssueCertResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TransparencyLogStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Append = channel.unary_unary(
                '/mpc.v1.TransparencyLog/Append',
                request_serializer=mpc__pb2.TLogAppend.SerializeToString,
                response_deserializer=mpc__pb2.TLogInclusion.FromString,
                _registered_method=True)
        self.GetByArtifact = channel.unary_unary(
                '/mpc.v1.TransparencyLog/GetByArtifact',
                request_serializer=mpc__pb2.GetByArtifactRequest.SerializeToString,
                response_deserializer=mpc__pb2.TLogAppend.FromString,
                _registered_method=True)


class TransparencyLogServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Append(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetByArtifact(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransparencyLogServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Append': grpc.unary_unary_rpc_method_handler(
                    servicer.Append,
                    request_deserializer=mpc__pb2.TLogAppend.FromString,
                    response_serializer=mpc__pb2.TLogInclusion.SerializeToString,
            ),
            'GetByArtifact': grpc.unary_unary_rpc_method_handler(
                    servicer.GetByArtifact,
                    request_deserializer=mpc__pb2.GetByArtifactRequest.FromString,
                    response_serializer=mpc__pb2.TLogAppend.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mpc.v1.TransparencyLog', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mpc.v1.TransparencyLog', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TransparencyLog(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Append(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc.v1.TransparencyLog/Append',
            mpc__pb2.TLogAppend.SerializeToString,
            mpc__pb2.TLogInclusion.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetByArtifact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc.v1.TransparencyLog/GetByArtifact',
            mpc__pb2.GetByArtifactRequest.SerializeToString,
            mpc__pb2.TLogAppend.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AuthNStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VerifyWebAuthn = channel.unary_unary(
                '/mpc.v1.AuthN/VerifyWebAuthn',
                request_serializer=mpc__pb2.VerifyWebAuthnRequest.SerializeToString,
                response_deserializer=mpc__pb2.VerifyWebAuthnResponse.FromString,
                _registered_method=True)


class AuthNServicer(object):
    """Missing associated documentation comment in .proto file."""

    def VerifyWebAuthn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthNServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VerifyWebAuthn': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyWebAuthn,
                    request_deserializer=mpc__pb2.VerifyWebAuthnRequest.FromString,
                    response_serializer=mpc__pb2.VerifyWebAuthnResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mpc.v1.AuthN', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mpc.v1.AuthN', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AuthN(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def VerifyWebAuthn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc.v1.AuthN/VerifyWebAuthn',
            mpc__pb2.VerifyWebAuthnRequest.SerializeToString,
            mpc__pb2.VerifyWebAuthnResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
