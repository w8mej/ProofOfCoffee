# envoy-mtls-sds.yaml
#
# ===========================
# Security & Ops
# ===========================
# - mTLS to both upstreams: your backend service and OPA (ext_authz).
# - Secrets are loaded via **SDS** (Secret Discovery Service). In this PoC we use
#   static "inline SDS" via `static_resources.secrets`; in production, use a real SDS (xDS).
# - Validation contexts pin the CA and, optionally, SANs (match_subject_alt_names).
#
# ===========================
# Tunables / Config
# ===========================
# - Replace `backend_mtls_*` and `opa_mtls_*` PEM paths with your cert-manager or Vault mounts.
# - Set `match_subject_alt_names` to pin expected DNS names.
# - Adjust `tls_minimum_protocol_version` to TLSv1_3 where possible.
#
# ===========================
# Improvements / Production
# ===========================
# - Use dynamic SDS via your control plane (xDS) with rotation.
# - Enforce SAN pinning (SPIFFE IDs) and CRL/OCSP if required.
# - Enable circuit breakers, retries, and health checks on clusters.

#### Sample layout within the container
#/tls/
#  backend/
#    ca.crt
#    client/
#      tls.crt
#      tls.key
#  opa/
#    ca.crt
#    client/
#      tls.crt
#      tls.key
#/policy/
#  opa-config.yaml
#  bundles/
#    kms_receipt.tar.gz

static_resources:
  listeners:
  - name: listener_0
    address: { socket_address: { address: 0.0.0.0, port_value: 10000 } }
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              - match: { prefix: "/" }
                route: { cluster: service_backend }
              typed_per_filter_config:
                envoy.filters.http.ext_authz:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                  check_settings:
                    context_extensions:
                      "example": "opa"
          http_filters:
          - name: envoy.filters.http.ext_authz
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
              failure_mode_allow: false
              transport_api_version: V3
              grpc_service:
                envoy_grpc:
                  cluster_name: opa
                timeout: 0.2s
          - name: envoy.filters.http.router

  clusters:
  # Backend with mTLS via SDS
  - name: service_backend
    connect_timeout: 1s
    type: LOGICAL_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: service_backend
      endpoints:
      - lb_endpoints:
        - endpoint: { address: { socket_address: { address: 127.0.0.1, port_value: 8080 } } }
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
        # Client cert + key (SDS secret)
        tls_certificate_sds_secret_configs:
        - name: backend_client_cert
        # Verify upstream server cert (CA + SAN pinning)
        common_tls_context:
          validation_context_sds_secret_config:
            name: backend_validation
          tls_params:
            tls_minimum_protocol_version: TLSv1_2

  # OPA ext_authz over mTLS
  - name: opa
    type: LOGICAL_DNS
    connect_timeout: 1s
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: opa
      endpoints:
      - lb_endpoints:
        - endpoint: { address: { socket_address: { address: 127.0.0.1, port_value: 9191 } } }
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
        tls_certificate_sds_secret_configs:
        - name: opa_client_cert
        common_tls_context:
          validation_context_sds_secret_config:
            name: opa_validation
          tls_params:
            tls_minimum_protocol_version: TLSv1_2

  # Static "inline SDS" secrets for PoC. In production, prefer dynamic SDS (xDS).
  secrets:
  # Client cert/key for backend mTLS
  - name: backend_client_cert
    tls_certificate:
      certificate_chain: { filename: /tls/backend/client/tls.crt }
      private_key:       { filename: /tls/backend/client/tls.key }
  # Root CA + optional SAN pin for backend server
  - name: backend_validation
    validation_context:
      trusted_ca: { filename: /tls/backend/ca.crt }
      # Optional SAN pinning:
      # match_subject_alt_names:
      # - exact: "api.internal.example.com"

  # Client cert/key for OPA mTLS
  - name: opa_client_cert
    tls_certificate:
      certificate_chain: { filename: /tls/opa/client/tls.crt }
      private_key:       { filename: /tls/opa/client/tls.key }
  # Root CA + optional SAN pin for OPA server
  - name: opa_validation
    validation_context:
      trusted_ca: { filename: /tls/opa/ca.crt }
      # match_subject_alt_names:
      # - exact: "opa.sidecar.svc.cluster.local"