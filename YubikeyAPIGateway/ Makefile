############################################################
# üì¶ PoC: YubiKey-Secured API Gateway ‚Äî Build Orchestration
# ----------------------------------------------------------
# This Makefile provides a simple command-line interface to:
#   - Deploy Terraform-managed Vault secrets
#   - Encrypt API keys for a YubiKey
#   - Run the FastAPI gateway server
#   - Test health endpoints
#   - Clean up local artifacts
#
# Ideal for quickly demoing the end-to-end PoC to a hiring manager.
# ‚ö†Ô∏è PoC ONLY ‚Äî Not production-ready.
############################################################

# Use bash for shell commands
SHELL := /bin/bash

# Directory where Terraform code lives
TF_DIR := terraform

.PHONY: tf-init tf-apply tf-destroy unwrap run-gateway test clean

############################################################
# üîπ Terraform Init
# - Initializes the Terraform working directory
# - Downloads necessary provider plugins
# - Prepares the backend configuration
############################################################
tf-init:
	cd $(TF_DIR) && terraform init

############################################################
# üîπ Terraform Apply
# - Runs `terraform apply` to provision:
#   - Vault KV secrets
#   - Wrapped YubiKey-encrypted API key
# - Auto-approves changes for faster demos
############################################################
tf-apply: tf-init
	cd $(TF_DIR) && terraform apply -auto-approve

############################################################
# üîπ Terraform Destroy
# - Tears down everything provisioned by Terraform
# - Useful for resetting the environment between runs
############################################################
tf-destroy:
	cd $(TF_DIR) && terraform destroy -auto-approve

############################################################
# üîπ Unwrap API Key
# - Calls `unwrap_api_key.sh` to:
#   1. Fetch the wrapped API key from Vault
#   2. Decrypt it locally using a YubiKey (slot 9c)
# - Default APP_NAME is "myapp" unless overridden:
#   Example: `make unwrap APP_NAME=customapp`
############################################################
unwrap:
	./scripts/unwrap_api_key.sh $${APP_NAME:-myapp}

############################################################
# üîπ Run API Gateway
# - Installs Python dependencies for the FastAPI gateway
# - Starts the Uvicorn ASGI server on port 8000
# - Environment variables:
#     VAULT_ADDR   ‚Üí Vault server address (default: http://127.0.0.1:8200)
#     VAULT_TOKEN  ‚Üí Vault token for access (default: root)
#     APP_NAME     ‚Üí Logical app name for key lookup (default: myapp)
############################################################
run-gateway:
	cd gateway && pip install -r requirements.txt && \
	VAULT_ADDR=$${VAULT_ADDR:-http://127.0.0.1:8200} \
	VAULT_TOKEN=$${VAULT_TOKEN:-root} \
	APP_NAME=$${APP_NAME:-myapp} \
	uvicorn app:app --host 0.0.0.0 --port 8000

############################################################
# üîπ Test API Gateway
# - Sends a GET request to the /health endpoint
# - Prints the HTTP status code (expect 200 for healthy)
############################################################
test:
	curl -s -o /dev/null -w "%{http_code}\n" http://127.0.0.1:8000/health

############################################################
# üîπ Clean Local Artifacts
# - Removes local Terraform-generated API key hash,
#   wrapped API key, public cert, and temp files
# - Safe to run repeatedly; ignores missing files
############################################################
clean:
	rm -f terraform/api_key.sha256.b64 \
	      terraform/wrapped_api_key.b64 \
	      terraform/client_pub.pem \
	      terraform/wrapped.bin || true